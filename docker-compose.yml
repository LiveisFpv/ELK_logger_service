services:
# Startup ELK stack for logging
  elasticsearch:
    image: elasticsearch:8.17.2
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms384m -Xmx384m"
      - "xpack.security.enabled=false"
    mem_limit: 768m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - grpc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 20s
      timeout: 5s
      retries: 10

  logstash:
    image: logstash:8.17.2
    container_name: logstash
    environment:
      - "LS_JAVA_OPTS=-Xms192m -Xmx192m"
    mem_limit: 384m
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5044:5044"
      - "5050:5050"
      - "9600:9600"
    networks:
      - grpc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  kibana:
    image: kibana:8.17.2
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    mem_limit: 800m
    ports:
      - "5601:5601"
    networks:
      - grpc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/status"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
  
volumes:
  esdata:
# Before start create a network with command
# docker network create grpc_network
networks:
  grpc_network:
    external: true
